{"version":3,"sources":["index.ts"],"names":[],"mappings":"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","sourcesContent":["import { StepChart, Note, ArrowType, Arrow, ArrowDirection, NoteType } from '../../../models';\r\nimport { AbstractStepChartRenderer } from '../abstract-renderer';\r\n\r\nimport _ from 'lodash';\r\nimport { toBpmChangesLookup } from '../../../helpers';\r\n\r\nimport 'chalk';\r\nimport chalk from 'chalk';\r\nimport { StepChartRenderArgs } from '..';\r\n\r\ninterface Args {\r\n    printFn: (msg: string) => void;\r\n    debugPrintFn?: (msg: string) => void;\r\n    waitThenFn: (waitTime: number, then: () => void) => void;\r\n\r\n    realtime: boolean;\r\n    showMeasureNumbers: boolean;\r\n}\r\n\r\nexport class ConsoleStepChartRenderer extends AbstractStepChartRenderer {\r\n    constructor(private args: Args) {\r\n        super();\r\n    }\r\n\r\n    async render(chart: StepChart, renderArgs: StepChartRenderArgs): Promise<void> {\r\n        renderArgs.bpmMultiplier = renderArgs.bpmMultiplier || 1;\r\n\r\n        // We're just getting the first dance-single segment\r\n        const noteSegment = _.find(chart.noteSegments, s => s.type == 'dance-single');\r\n        if (!noteSegment) {\r\n            // TODO: handle failure\r\n            return;\r\n        }\r\n\r\n        const bpmSegments = chart.headerSegment.bpmSegments;\r\n        if (!bpmSegments || !bpmSegments.length) {\r\n            // TODO: handle failure\r\n            return;\r\n        }\r\n\r\n        // A lookup we can use to see when bpm changes should occur\r\n        const bpmChangesLookup = toBpmChangesLookup(bpmSegments);\r\n\r\n        let lastNote: Note | undefined;\r\n        let bpm = 0;\r\n\r\n        const measures = noteSegment.measures;\r\n        for (let measureNum in measures) {\r\n            const measure = measures[measureNum];\r\n\r\n            for (let noteNum in measure.notes) {\r\n                const note = measure.notes[noteNum];\r\n\r\n                const noteString = this.printNote(note);\r\n                const noteInfo = this.args.showMeasureNumbers \r\n                    ? _.padEnd(`(${measureNum}, ${noteNum}): `, 10) \r\n                    : '';\r\n\r\n                // Calculate beat delta from last note\r\n                const beatDelta = lastNote ? note.beat - lastNote.beat : note.beat;\r\n\r\n                // See if we're changing bpm\r\n                const maybeBpmChange = bpmChangesLookup[note.beat];\r\n                if (maybeBpmChange) {\r\n                    bpm = maybeBpmChange * renderArgs.bpmMultiplier;\r\n\r\n                    this.debug(`---Changing BPM: ${bpm}---`);\r\n                }\r\n\r\n                await this.printNoteToBeat(`${noteInfo}${noteString}`, { bpm: bpm, lastBeatDelta: beatDelta })\r\n\r\n                lastNote = note;\r\n            }\r\n        }\r\n    }\r\n\r\n    private async printNoteToBeat(msg: string, beatInfo: { lastBeatDelta: number; bpm: number }): Promise<void> {\r\n        if (!this.args.realtime) {\r\n            this.args.printFn(msg);\r\n            return Promise.resolve();\r\n        }\r\n\r\n        const waitTime = this.calculateNoteRenderDelay(beatInfo.lastBeatDelta, beatInfo.bpm);\r\n\r\n        return new Promise<void>((res, rej) => {\r\n            this.args.waitThenFn(waitTime, () => {\r\n                this.args.printFn(msg);\r\n                res();\r\n            });\r\n        });\r\n    }\r\n\r\n    protected printNote(note: Note): string {\r\n        const arrows = note.data.arrows;\r\n        return `${this.printArrow(arrows.left, note.type)}  ${this.printArrow(arrows.up, note.type)}  ${this.printArrow(arrows.down, note.type)}  ${this.printArrow(arrows.right, note.type)}`;\r\n    }\r\n\r\n    protected printArrow(arrow: Arrow, noteType: NoteType): string {\r\n        const arrowCharacter = (() => {\r\n            // print arrow types that look the same no matter the direction\r\n            switch (arrow.type) {\r\n                case ArrowType.HoldRollTail:\r\n                case ArrowType.Hold:\r\n                    return '|'\r\n            }\r\n\r\n            switch (arrow.direction) {\r\n                case ArrowDirection.Left:\r\n                    switch (arrow.type) {\r\n                        case ArrowType.Normal:\r\n                            return '<';\r\n                        case ArrowType.HoldHead:\r\n                            return '<'\r\n                    }\r\n                case ArrowDirection.Down:\r\n                    switch (arrow.type) {\r\n                        case ArrowType.Normal:\r\n                            return 'v';\r\n                        case ArrowType.HoldHead:\r\n                            return 'V'\r\n                    }\r\n                case ArrowDirection.Up:\r\n                    switch (arrow.type) {\r\n                        case ArrowType.Normal:\r\n                            return '^';\r\n                        case ArrowType.HoldHead:\r\n                            return 'A'\r\n                    }\r\n                case ArrowDirection.Right:\r\n                    switch (arrow.type) {\r\n                        case ArrowType.Normal:\r\n                            return '>';\r\n                        case ArrowType.HoldHead:\r\n                            return '>'\r\n                    }\r\n            }\r\n        })();\r\n\r\n        if (!arrowCharacter) {\r\n            return '.';\r\n        }\r\n\r\n        const renderFunction = (() => {\r\n            switch (arrow.type) {\r\n                case ArrowType.HoldHead:\r\n                case ArrowType.Hold:\r\n                case ArrowType.HoldRollTail:\r\n                    return chalk.green;\r\n                default:\r\n                    break;\r\n            }\r\n\r\n            switch (noteType) {\r\n                case NoteType.QUARTER:\r\n                    return chalk.red;\r\n                case NoteType.EIGHTH:\r\n                    return chalk.blue;\r\n                case NoteType.TWELFTH:\r\n                    return chalk.hex('#8a2be2');\r\n                case NoteType.SIXTEENTH:\r\n                    return chalk.yellow;\r\n                case NoteType.TWENTY_FOURTH:\r\n                    return chalk.hex('#ff69b4');\r\n                case NoteType.THIRTY_SECOND:\r\n                    return chalk.hex('#ffa500');\r\n                case NoteType.FORTY_EIGHTH:\r\n                    return chalk.blueBright;\r\n                case NoteType.SIXTY_FOURTH:\r\n                    return chalk.green;\r\n                default:\r\n                    return chalk.gray;\r\n            }\r\n        })();\r\n\r\n        return renderFunction(arrowCharacter);\r\n    }\r\n\r\n    protected isHold(arrow: Arrow): boolean {\r\n        return arrow.type == ArrowType.HoldHead;\r\n    }\r\n\r\n    protected debug(msg: string) {\r\n        const debugPrintFn = this.args.debugPrintFn;\r\n        if (!debugPrintFn) {\r\n            return;\r\n        }\r\n\r\n        debugPrintFn(msg);\r\n    }\r\n}"],"sourceRoot":""}