{"version":3,"sources":["index.ts"],"names":[],"mappings":";;;AAAa,QAAA,iBAAA,GAAoB,CAApB;AAEb;AACa,QAAA,iBAAA,GAAoB,EAApB;AA4Db,IAAY,cAAZ;AAAA,CAAA,UAAY,cAAZ,EAA0B;AACtB,mBAAA,eAAA,MAAA,IAAA,CAAA,IAAA,MAAA;AACA,mBAAA,eAAA,MAAA,IAAA,CAAA,IAAA,MAAA;AACA,mBAAA,eAAA,IAAA,IAAA,CAAA,IAAA,IAAA;AACA,mBAAA,eAAA,OAAA,IAAA,CAAA,IAAA,OAAA;AACH,CALD,EAAY,iBAAA,QAAA,cAAA,KAAA,QAAA,cAAA,GAAc,EAAd,CAAZ;AAOA,IAAY,SAAZ;AAAA,CAAA,UAAY,SAAZ,EAAqB;AACjB,cAAA,UAAA,SAAA,IAAA,CAAA,IAAA,SAAA;AACA,cAAA,UAAA,MAAA,IAAA,CAAA,IAAA,MAAA;AACA,cAAA,UAAA,QAAA,IAAA,CAAA,IAAA,QAAA;AACA,cAAA,UAAA,UAAA,IAAA,CAAA,IAAA,UAAA;AACA,cAAA,UAAA,MAAA,IAAA,CAAA,IAAA,MAAA;AACA,cAAA,UAAA,cAAA,IAAA,CAAA,IAAA,cAAA;AACA,cAAA,UAAA,UAAA,IAAA,CAAA,IAAA,UAAA;AACA,cAAA,UAAA,MAAA,IAAA,CAAA,IAAA,MAAA;AACH,CATD,EAAY,YAAA,QAAA,SAAA,KAAA,QAAA,SAAA,GAAS,EAAT,CAAZ;AAWA,IAAY,QAAZ;AAAA,CAAA,UAAY,QAAZ,EAAoB;AAChB,aAAA,SAAA,SAAA,IAAA,CAAA,IAAA,SAAA;AACA,aAAA,SAAA,SAAA,IAAA,IAAA,IAAA,SAAA;AACA,aAAA,SAAA,QAAA,IAAA,KAAA,IAAA,QAAA;AACA,aAAA,SAAA,SAAA,IAAA,mBAAA,IAAA,SAAA;AACA,aAAA,SAAA,WAAA,IAAA,MAAA,IAAA,WAAA;AACA,aAAA,SAAA,eAAA,IAAA,oBAAA,IAAA,eAAA;AACA,aAAA,SAAA,eAAA,IAAA,OAAA,IAAA,eAAA;AACA,aAAA,SAAA,cAAA,IAAA,oBAAA,IAAA,cAAA;AACA,aAAA,SAAA,cAAA,IAAA,QAAA,IAAA,cAAA;AACA,aAAA,SAAA,mBAAA,IAAA,oBAAA,IAAA,mBAAA;AACH,CAXD,EAAY,WAAA,QAAA,QAAA,KAAA,QAAA,QAAA,GAAQ,EAAR,CAAZ;AAoFA,SAAA,aAAA,GAAA;AACI,WAAO;AACH,cAAM,CADH;AAEH,iBAAS,EAFN;AAGH,cAAM,SAAS,OAHZ;AAIH,cAAM,EAAE,QAAQ,iBAAV;AAJH,KAAP;AAMH;AAPD,QAAA,aAAA,GAAA,aAAA;AASA,SAAA,eAAA,GAAA;AACI,WAAO;AACH,cAAM,EAAE,MAAM,UAAU,IAAlB,EAAwB,WAAW,eAAe,IAAlD,EADH;AAEH,cAAM,EAAE,MAAM,UAAU,IAAlB,EAAwB,WAAW,eAAe,IAAlD,EAFH;AAGH,YAAI,EAAE,MAAM,UAAU,IAAlB,EAAwB,WAAW,eAAe,EAAlD,EAHD;AAIH,eAAO,EAAE,MAAM,UAAU,IAAlB,EAAwB,WAAW,eAAe,KAAlD;AAJJ,KAAP;AAMH;AAPD,QAAA,eAAA,GAAA,eAAA","sourcesContent":["export const BEATS_PER_MEASURE = 4;\r\n\r\n// Since 48 * 4 = 196, we can safely subdivide a measure by 48 lines\r\nexport const LINES_PER_MEASURE = 48;\r\n\r\nexport interface StepChart {\r\n    headerSegment: HeaderSegment\r\n    noteSegments: NotesSegment[]\r\n}\r\n\r\nexport interface NotesSegment {\r\n    type: 'dance-single'\r\n    | 'dance-double'\r\n    | 'dance-solo'\r\n    | 'pump-single'\r\n    | 'pump-double'\r\n    | 'pump-couple'\r\n    | 'ez2-single'\r\n    | 'ez2-double'\r\n    | 'ez2-real'\r\n    | 'para-single'\r\n    | 'unknown';\r\n\r\n    description?: string;\r\n    difficultyClass: 'beginner' | 'easy' | 'medium' | 'hard' | 'challenge';\r\n    difficultyMeter: number;\r\n    radarValues: RadarValues\r\n\r\n    measures: NoteMeasureData[];\r\n}\r\n\r\nexport interface NoteMeasureData {\r\n    measure: number;\r\n    notes: Note[];\r\n}\r\n\r\nexport type Note = {\r\n    beat: number;\r\n    type: NoteType;\r\n    rawData: string;\r\n    data: NoteData;\r\n}\r\n\r\nexport interface NoteData {\r\n    arrows: NoteDataArrows\r\n}\r\n\r\nexport interface NoteDataArrows {\r\n    left: Arrow;\r\n    down: Arrow;\r\n    up: Arrow;\r\n    right: Arrow;\r\n    left2?: Arrow;\r\n    down2?: Arrow;\r\n    up2?: Arrow;\r\n    right2?: Arrow;\r\n}\r\n\r\nexport interface Arrow {\r\n    direction: ArrowDirection;\r\n    type: ArrowType;\r\n}\r\n\r\nexport enum ArrowDirection {\r\n    Left,\r\n    Down,\r\n    Up,\r\n    Right\r\n}\r\n\r\nexport enum ArrowType {\r\n    Unknown,\r\n    None,\r\n    Normal,\r\n    HoldHead,\r\n    Hold,\r\n    HoldRollTail,\r\n    RollHead,\r\n    Mine,\r\n}\r\n\r\nexport enum NoteType {\r\n    UNKNOWN = 0,\r\n    QUARTER = 1 / 4,\r\n    EIGHTH = 1 / 8,\r\n    TWELFTH = 1 / 12,\r\n    SIXTEENTH = 1 / 16,\r\n    TWENTY_FOURTH = 1 / 24,\r\n    THIRTY_SECOND = 1 / 32,\r\n    FORTY_EIGHTH = 1 / 48,\r\n    SIXTY_FOURTH = 1 / 64,\r\n    ONE_NINETY_SECOND = 1 / 192\r\n}\r\n\r\nexport interface RadarValues {\r\n    voltage: number;\r\n    stream: number;\r\n    chaos: number;\r\n    freeze: number;\r\n    air: number;\r\n}\r\n\r\nexport interface HeaderSegment {\r\n    title?: string;\r\n    subtitle?: string;\r\n    artist?: string;\r\n    credit?: string;\r\n\r\n    titleTransliteration?: string;\r\n    subtitleTransliteration?: string;\r\n    artistTransliteration?: string;\r\n\r\n    bannerFileName?: string;\r\n    backgroundFileName?: string;\r\n    cdTitle?: string;\r\n    musicFileName?: string;\r\n\r\n    // The amount of time in seconds before or after the music starts that beat 0 occurs\r\n    offset?: number;\r\n\r\n    // The time in seconds to start the music sample that plays on the select music screen\r\n    sampleStart?: number;\r\n    // The time in seconds to let the sample music play after starting \r\n    sampleLength?: number;\r\n\r\n    // If 'NO', the song cannot be selected manually\r\n    selectable?: boolean;\r\n\r\n    // Represents a BPM segment in gampelay\r\n    bpmSegments?: BpmSegment[];\r\n\r\n    // Overrides the song's actual BPM display at ScreenSelectMusic\r\n    displayBpm?: number | '*';\r\n\r\n    // Represents Stops in gameplay.\r\n    stopSegments?: StopSegment[];\r\n\r\n    // Indicates background changes during gameplay\r\n    bgChangeSegments?: BgChangeSegment[];\r\n}\r\n\r\nexport interface BgChangeSegment {\r\n    // The beat to change the background at\r\n    beat: number;\r\n\r\n    // The background name to change to\r\n    name: string;\r\n}\r\n\r\nexport interface BpmSegment {\r\n    // The beat to change speed at\r\n    beat: number;\r\n\r\n    // The speed to change to\r\n    bpm: number;\r\n}\r\n\r\nexport interface StopSegment {\r\n    // The beat to stop at\r\n    beat: number;\r\n\r\n    // The duration, in seconds, to stop for\r\n    duration: number;\r\n}\r\n\r\nexport function makeEmptyNote(): Note {\r\n    return {\r\n        beat: 0,\r\n        rawData: '',\r\n        type: NoteType.UNKNOWN,\r\n        data: { arrows: makeEmptyArrows() }\r\n    }\r\n}\r\n\r\nexport function makeEmptyArrows(): NoteDataArrows {\r\n    return {\r\n        left: { type: ArrowType.None, direction: ArrowDirection.Left },\r\n        down: { type: ArrowType.None, direction: ArrowDirection.Down },\r\n        up: { type: ArrowType.None, direction: ArrowDirection.Up },\r\n        right: { type: ArrowType.None, direction: ArrowDirection.Right },\r\n    };\r\n}"],"sourceRoot":""}