{"version":3,"sources":["index.ts"],"names":[],"mappings":";;;AAGA,IAAA,4BAAA,aAAA,YAAA;AAAA,aAAA,yBAAA,GAAA,CAcC;AARa,8BAAA,SAAA,CAAA,wBAAA,GAAV,UAAmC,aAAnC,EAA0D,GAA1D,EAAqE;AACjE,YAAI,iBAAiB,CAArB,EAAwB;AACpB,mBAAO,CAAP;AACH;AAED,YAAM,aAAa,MAAM,KAAzB;AACA,eAAO,gBAAgB,UAAvB;AACH,KAPS;AAQd,WAAA,yBAAA;AAAC,CAdD,EAAA;AAAsB,QAAA,yBAAA,GAAA,yBAAA","sourcesContent":["import { StepChart, Arrow, Note, NoteType } from \"../../../models\";\r\nimport { StepChartRenderer, StepChartRenderArgs } from \"..\";\r\n\r\nexport abstract class AbstractStepChartRenderer implements StepChartRenderer {\r\n    abstract render(chart: StepChart, renderArgs: StepChartRenderArgs): Promise<void>;\r\n\r\n    protected abstract printNote(note: Note): string;\r\n    protected abstract printArrow(arrow: Arrow, noteType: NoteType): string;\r\n\r\n    protected calculateNoteRenderDelay(lastBeatDelta: number, bpm: number): number {\r\n        if (lastBeatDelta == 0) {\r\n            return 0;\r\n        }\r\n\r\n        const beatsPerMs = bpm / 60000;\r\n        return lastBeatDelta / beatsPerMs;\r\n    }\r\n}"],"sourceRoot":""}