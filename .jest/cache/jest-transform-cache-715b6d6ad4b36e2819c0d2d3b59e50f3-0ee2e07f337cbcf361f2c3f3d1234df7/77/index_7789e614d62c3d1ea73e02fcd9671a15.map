{"version":3,"sources":["index.ts"],"names":[],"mappings":";;;;;;AAAA,SAAA,QAAA,aAAA,CAAA;AAEA,SAAA,KAAA,CAAyB,UAAzB,EAA0C,OAA1C,EAAuE;AACnE,aAAA,GAAA,CAAa,UAAb,EAA8B,CAA9B,EAAyC,OAAzC,EAAyD,KAAzD,EAAmE;AAC/D;AACA,YAAI,KAAK,WAAW,MAApB,EAA4B;AACxB,oBAAQ,IAAR,CAAa,KAAb;AAEA,mBAAO,YAAA;AAAM,uBAAA,OAAA;AAAO,aAApB;AACH;AAED;AACA,YAAM,OAAO,WAAW,CAAX,CAAb;AAEA;AACA,YAAI,QAAQ,IAAR,CAAJ,EAAmB;AACf;AACA,oBAAQ,IAAR,CAAa,KAAb;AAEA;AACA,mBAAO,YAAA;AAAM,uBAAA,IAAI,UAAJ,EAAgB,IAAI,CAApB,EAAuB,OAAvB,EAAA,EAAA,GAAA;AAAqC,aAAlD;AACH;AAED;AACA,cAAM,IAAN,CAAW,IAAX;AAEA;AACA,eAAO,YAAA;AAAM,mBAAA,IAAI,UAAJ,EAAgB,IAAI,CAApB,EAAuB,OAAvB,EAAA,KAAA,GAAA;AAAwC,SAArD;AACH;AAED,WAAO,IAAI,UAAJ,EAAgB,CAAhB,EAAmB,EAAnB,EAAuB,EAAvB,GAAP;AACH;AA7BD,QAAA,KAAA,GAAA,KAAA;AA+BA;AACA,SAAA,UAAA,CAA2B,CAA3B,EAAsC,CAAtC,EAA+C;AAC3C,WAAO,IAAI,WAAW,CAAX,EAAc,IAAI,CAAlB,CAAJ,GAA2B,CAAlC;AACH;AAFD,QAAA,UAAA,GAAA,UAAA;AAIA;AACA,SAAA,cAAA,CAA+B,SAA/B,EAAkD,WAAlD,EAAqE;AACjE,QAAM,MAAM,WAAW,SAAX,EAAsB,WAAtB,CAAZ;AAEA,WAAO,EAAE,WAAW,YAAY,GAAzB,EAA8B,aAAa,cAAc,GAAzD,EAAP;AACH;AAJD,QAAA,cAAA,GAAA,cAAA","sourcesContent":["export * from './stepchart';\r\n\r\nexport function split<T>(collection: T[], chunkFn: (item: T) => boolean): T[][] {\r\n    function rec(collection: T[], i: number, results: T[][], chunk: T[]): () => T[][] {\r\n        // If we're at the end of the line, add the current chunk and return results\r\n        if (i >= collection.length) {\r\n            results.push(chunk);\r\n\r\n            return () => results;\r\n        }\r\n\r\n        // Get the current item\r\n        const item = collection[i];\r\n\r\n        // If we need to chunk on this item...\r\n        if (chunkFn(item)) {\r\n            // ...add this chunk to the results\r\n            results.push(chunk);\r\n\r\n            // ...skip this line & create a new chunk\r\n            return () => rec(collection, i + 1, results, [])();\r\n        }\r\n\r\n        // ...otherwise, add to the chunk\r\n        chunk.push(item);\r\n\r\n        // ...and move onto the next item!\r\n        return () => rec(collection, i + 1, results, chunk)();\r\n    }\r\n\r\n    return rec(collection, 0, [], [])();\r\n}\r\n\r\n// Source: https://stackoverflow.com/questions/4652468/is-there-a-javascript-function-that-reduces-a-fraction\r\nexport function computeGcd(a: number, b: number): number {\r\n    return b ? computeGcd(b, a % b) : a;\r\n}\r\n\r\n// Source: https://stackoverflow.com/questions/4652468/is-there-a-javascript-function-that-reduces-a-fraction\r\nexport function reduceFraction(numerator: number, denominator: number): { numerator: number; denominator: number } {\r\n    const gcd = computeGcd(numerator, denominator);\r\n\r\n    return { numerator: numerator / gcd, denominator: denominator / gcd };\r\n}"],"sourceRoot":""}